helm template --name=istio --namespace=istio-system \
  --set security.selfSigned=false \
  --set global.controlPlaneSecurityEnabled=true \
  --set global.meshExpansion.enabled=true \
  --set gateways.istio-egressgateway.enabled=true \
  --set gateways.istio-egressgateway.env.ISTIO_META_REQUESTED_NETWORK_VIEW="external" \
  --set global.multiCluster.enabled=true \
  --set istiocoredns.enabled=true \
  --set global.podDNSSearchNamespaces[0]=global
  install/kubernetes/helm/istio > istio-meshexpansion.yaml


  echo "169.x.x.x istio-citadel istio-pilot istio-pilot.istio-system" | sudo tee -a /etc/hosts

  /var/lib/istio/envoy/envoy_bootstrap_tmpl.json


kubectl exec -it sleep-69c766786-qtlzh -c sleep -- curl vmhttp.vm.iriscloud:8888/hello
k exec -it sleep-5bbf6b4f77-j6qg7 -c sleep -- curl -I httpbinremote.default.global:8000/headers


istioctl x add-to-mesh external-service mysqldb vmIPaddress tcp:3306 -n vm


kubectl -n vm get secret istio.default  \
    -o jsonpath='{.data.root-cert\.pem}' |base64 --decode > root-cert.pem
kubectl -n vm get secret istio.default  \
    -o jsonpath='{.data.key\.pem}' |base64 --decode > key.pem
kubectl -n vm get secret istio.default  \
      -o jsonpath='{.data.cert-chain\.pem}' |base64 --decode > cert-chain.pem





kubectl apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
           pods insecure
           upstream
           fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        proxy . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
    }
    global:53 {
        errors
        cache 30
        proxy . 172.21.217.180
    }
EOF






127.255.0.3 httpbin.default.global

curl httpbin.default.global:8000 -v

mysqldb.vm.svc.cluster.local
mysqldb.vm.svc.cluster.local


echo "ISTIO_INBOUND_PORTS=3306,9080,8888" > /var/lib/istio/envoy/sidecar.env


apiVersion: install.istio.io/v1alpha2
kind: IstioControlPlane
spec:
  values:
    global:
      # Provides dns resolution for global services
      podDNSSearchNamespaces:
        - global
        - "{{ valueOrDefault .DeploymentMeta.Namespace \"default\" }}.global"

      multiCluster:
        enabled: true

      controlPlaneSecurityEnabled: true
      meshExpansion:
        enabled: true

    # Multicluster with gateways requires a root CA
    # Cluster local CAs are bootstrapped with the root CA.
    security:
      selfSigned: false

    # Provides dns resolution for service entries of form
    # name.namespace.global
    istiocoredns:
      enabled: true

    gateways:
      istio-egressgateway:
        enabled: true
        env:
          # Needed to route traffic via egress gateway if desired.
          ISTIO_META_REQUESTED_NETWORK_VIEW: "external"

